// Generated by Selenium IDE
package org.ual.hmis.equipo20;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class EstaticaSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.gecko.driver", "drivers/geckodriver.exe"); 
    System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe"); 
    
    ChromeOptions cOptions = new ChromeOptions();
    cOptions.setHeadless(true);
    FirefoxOptions fOptions = new FirefoxOptions();
    fOptions.setHeadless(true);
	   
    driver = new ChromeDriver(cOptions);
    // driver = new FirefoxDriver(fOptions); 
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.sleep(timeout);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Set<String> whNow = driver.getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get("window_handles");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  @Test
  public void testContenido() {
    // Test name: testContenido
    // Step # | name | target | value
    // 1 | open | https://hmis-web2.azurewebsites.net/ | 
    driver.get("https://hmis-web2.azurewebsites.net/");
    // 2 | assertText | css=h1 | Equipo 20
    assertThat(driver.findElement(By.cssSelector("h1")).getText(), is("Equipo 20"));
    // 3 | click | css=.block:nth-child(4) > p | 
    driver.findElement(By.cssSelector(".block:nth-child(4) > p")).click();
    // 4 | click | css=.block:nth-child(4) > p | 
    driver.findElement(By.cssSelector(".block:nth-child(4) > p")).click();
    // 5 | doubleClick | css=.block:nth-child(4) > p | 
    {
      WebElement element = driver.findElement(By.cssSelector(".block:nth-child(4) > p"));
      Actions builder = new Actions(driver);
      builder.doubleClick(element).perform();
    }
    // 6 | verifyText | css=.block:nth-child(4) > p | Soy Victor Stancioiu, alumno de ingeniería informática la UAL. Esta página web está publicada como parte de la asignatura HMIS del 2024.
    assertThat(driver.findElement(By.cssSelector(".block:nth-child(4) > p")).getText(), is("Soy Victor Stancioiu, alumno de ingeniería informática la UAL. Esta página web está publicada como parte de la asignatura HMIS del 2024."));
    // 7 | click | css=.block:nth-child(10) | 
    driver.findElement(By.cssSelector(".block:nth-child(10)")).click();
    // 8 | click | css=body | 
    driver.findElement(By.cssSelector("body")).click();
    // 9 | click | css=body | 
    driver.findElement(By.cssSelector("body")).click();
  }
  @Test
  public void testLinks1() {
    // Test name: testLinks1
    // Step # | name | target | value
    // 1 | open | https://hmis-web2.azurewebsites.net/ | 
    driver.get("https://hmis-web2.azurewebsites.net/");
    // 2 | mouseOver | css=.block:nth-child(7) .button_project | 
    {
      WebElement element = driver.findElement(By.cssSelector(".block:nth-child(7) .button_project"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 3 | click | css=.block:nth-child(7) .button_project | 
    vars.put("window_handles", driver.getWindowHandles());
    // 4 | storeWindowHandle | root | 
    driver.findElement(By.cssSelector(".block:nth-child(7) .button_project")).click();
    // 5 | selectWindow | handle=${win1278} | 
    vars.put("win1278", waitForWindow(2000));
    // 6 | assertTitle | GitHub - ualhmis2024-eq20/web-equipo | 
    vars.put("root", driver.getWindowHandle());
    // 7 | close |  | 
    driver.switchTo().window(vars.get("win1278").toString());
    // 8 | selectWindow | handle=${root} | 
    assertThat(driver.getTitle(), is("GitHub - ualhmis2024-eq20/web-equipo"));
    // 9 | click | css=.button_project:nth-child(2) | 
    driver.close();
    // 10 | selectWindow | handle=${win3314} | 
    driver.switchTo().window(vars.get("root").toString());
    // 11 | assertText | css=.p-nickname | vlcoo
    vars.put("window_handles", driver.getWindowHandles());
    // 12 | assertTitle | vlcoo (vlcoo) / Repositories · GitHub | 
    driver.findElement(By.cssSelector(".button_project:nth-child(2)")).click();
    // 13 | close |  | 
    vars.put("win3314", waitForWindow(2000));
    // 14 | selectWindow | handle=${root} | 
    driver.switchTo().window(vars.get("win3314").toString());
    assertThat(driver.findElement(By.cssSelector(".p-nickname")).getText(), is("vlcoo"));
    assertThat(driver.getTitle(), is("vlcoo (vlcoo) / Repositories · GitHub"));
    driver.close();
    driver.switchTo().window(vars.get("root").toString());
  }
}
